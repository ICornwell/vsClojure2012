<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
		<SchemaVersion>2.0</SchemaVersion>
		<ProjectGuid>{8fe1995b-4b6d-4911-b563-a759467fdf53}</ProjectGuid>
		<RootNamespace>$(MSBuildProjectName)</RootNamespace>
		<AssemblyName>$(MSBuildProjectName)</AssemblyName>
		<ClojureRuntimesDirectory>$(VSCLOJURE_RUNTIMES_DIR)</ClojureRuntimesDirectory>
		<ClojureVersion>1.3.0</ClojureVersion>
		<StartupFile>program.exe</StartupFile>
		<StartupArguments></StartupArguments>
		<ClojureLoadPath></ClojureLoadPath>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
		<DebugSymbols>true</DebugSymbols>
		<OutputPath>bin\Debug\</OutputPath>
		<EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
		<DebugSymbols>true</DebugSymbols>
		<OutputPath>bin\Release\</OutputPath>
		<EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
	</PropertyGroup>
	<ItemGroup>
		<Reference Include="Clojure.dll">
			<HintPath>$(ClojureRuntimesDirectory)\$(ClojureVersion)\Clojure.dll</HintPath>
		</Reference>
		<Reference Include="mscorlib" />
		<Reference Include="System" />
		<Reference Include="System.Core" />
		<Reference Include="System.Data" />
		<Reference Include="System.Data.DataSetExtensions" />
		<Reference Include="System.Xml" />
		<Reference Include="System.Xml.Linq" />
	</ItemGroup>
	<ItemGroup>
		<Compile Include="program.clj">
			<SubType>Code</SubType>
		</Compile>
	</ItemGroup>
	<Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />
	<Target Name="CreateManifestResourceNames">
	</Target>
	<Target Name="CoreCompile">
		<PropertyGroup>
			<ClojureNamespaces>@(Compile -> '%(RelativeDir)%(Filename)', ' ')</ClojureNamespaces>
		</PropertyGroup>
		<Copy SourceFiles="@(Compile)" SkipUnchangedFiles="true" OverwriteReadOnlyFiles="true" DestinationFiles="@(Compile -> '$(OutDir)%(RelativeDir)%(Filename)%(Extension)')"/>
		<Exec WorkingDirectory="$(OutDir)" Command="&quot;$(ClojureRuntimesDirectory)\$(ClojureVersion)\Clojure.Compile&quot; $(ClojureNamespaces.Replace('\', '.'))"/>
		<RemoveDuplicates Inputs="@(Compile -> '$(OutDir)%(RelativeDir)')">
			<Output TaskParameter="Filtered" ItemName="SourceDirectories"/>
		</RemoveDuplicates>
		<ItemGroup>
			<FileWrites Include="@(Compile -> '$(OutDir)%(RelativeDir)%(Filename)%(Extension)')"/>
			<FileWrites Include="@(Compile -> '$(OutDir)%(RelativeDir)%(Filename)%(Extension).dll')"/>
			<FileWrites Include="@(Compile -> '$(OutDir)%(RelativeDir)%(Filename)%(Extension).pdb')"/>
			<FileWrites Include="@(SourceDirectories)"/>
		</ItemGroup>
	</Target>
	<Target Name="BeforeBuild">
	</Target>
	<Target Name="AfterBuild">
	</Target>
	<Target
        Name="CopyFilesToOutputDirectory"
        DependsOnTargets="
            ComputeIntermediateSatelliteAssemblies;
            _CopyFilesMarkedCopyLocal;
            _CopySourceItemsToOutputDirectory;
            _CopyAppConfigFile;
            _CopyManifestFiles;
            _CheckForCompileOutputs;
            _SGenCheckForOutputs">
		<Copy
            SourceFiles="@(AddModules)"
            DestinationFolder="$(OutDir)"
            SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
            OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
            Retries="$(CopyRetryCount)"
            RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
            UseHardlinksIfPossible="$(CreateHardLinksForCopyAdditionalFilesIfPossible)"
            Condition="'@(AddModules)' != ''">
			<Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
		</Copy>
		<Copy SourceFiles="$(ClojureRuntimesDirectory)\$(ClojureVersion)\$(StartupFile)" DestinationFolder="$(OutDir)" SkipUnchangedFiles="$(SkipCopyUnchangedFiles)" OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" Retries="$(CopyRetryCount)" RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)" UseHardlinksIfPossible="$(CreateHardLinksForCopyAdditionalFilesIfPossible)">
			<Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
		</Copy>
	</Target>
</Project>